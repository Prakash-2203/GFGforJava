//
Given an expression string x. Examine whether the pairs and the orders of {,},(,),[,] are correct in exp.
For example, the function should return 'true' for exp = [()]{}{[()()]()} and 'false' for exp = [(]).

Note: The drive code prints "balanced" if function return true, otherwise it prints "not balanced".

Example 1:

Input:
{([])}
Output: 
true
Explanation: 
{ ( [ ] ) }. Same colored brackets can form 
balanced pairs, with 0 number of 
unbalanced bracket.
Example 2:

Input: 
()
Output: 
true
Explanation: 
(). Same bracket can form balanced pairs, 
and here only 1 type of bracket is 
present and in balanced way.
Example 3:

Input: 
([]
Output: 
false
Explanation: 
([]. Here square bracket is balanced but 
the small bracket is not balanced and 
Hence , the output will be unbalanced.
Your Task:
This is a function problem. You only need to complete the function ispar() that takes a string as a parameter and returns a boolean value true if brackets are balanced else returns false. The printing is done automatically by the driver code.

Expected Time Complexity: O(|x|)
Expected Auixilliary Space: O(|x|)

Constraints:
1 ≤ |x| ≤ 32000

 Code:

class Solution {
    // Function to check if brackets are balanced or not.
    static boolean ispar(String x) {
        // Create a stack to store opening brackets
        Stack<Character> stack = new Stack<>();

        // Traverse the expression
        for (char ch : x.toCharArray()) {
            // If it's an opening bracket, push it onto the stack
            if (ch == '(' || ch == '{' || ch == '[') {
                stack.push(ch);
            } 
            // If it's a closing bracket
            else if (ch == ')' || ch == '}' || ch == ']') {
                // If the stack is empty or the top of the stack doesn't match the closing bracket, return false
                if (stack.isEmpty()) {
                    return false;
                }
                char top = stack.pop();
                if ((ch == ')' && top != '(') || 
                    (ch == '}' && top != '{') || 
                    (ch == ']' && top != '[')) {
                    return false;
                }
            }
        }

        // If the stack is empty, it means all brackets are balanced
        return stack.isEmpty();
    }
}

///
/

class Solution
{
    //Function to check if brackets are balanced or not.
    static boolean ispar(String x)
    {
      
      
      
      Stack <Character> stack = new Stack<>();
      
      for(int i=0;i<x.length();i++){
          
          
          if(x.charAt(i) =='(' || x.charAt(i) =='[' || x.charAt(i) =='{' ){
              
              stack.push(x.charAt(i));
              
          }
         
          else if(x.charAt(i)==')' || x.charAt(i)==']' || x.charAt(i)=='}'){
              
              if(stack.isEmpty()) return false;
              
              char top = stack.pop();
              
              if((x.charAt(i) == ')' && top!='(') ||
                 (x.charAt(i) == ']' && top!='[') ||
                 (x.charAt(i) == '}' && top!='{'))  {
                     return false;
                 }
              
          }
          
      }
      
      return stack.isEmpty();
      
      
    }
}



